name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_SIMULATOR: ${{ github.repository }}/simulator
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  validate-shared-go:
    name: Validate Go Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Format check
      working-directory: packages/shared-go
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not properly formatted:"
          gofmt -s -d .
          exit 1
        fi

    - name: Go vet
      working-directory: packages/shared-go
      run: go vet ./...

    - name: Go build
      working-directory: packages/shared-go
      run: go build ./...

    - name: Go test
      working-directory: packages/shared-go
      run: go test -v ./...

  validate-simulator:
    name: Validate Simulator
    runs-on: ubuntu-latest
    needs: validate-shared-go
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Format check
      working-directory: apps/simulator
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not properly formatted:"
          gofmt -s -d .
          exit 1
        fi

    - name: Go vet
      working-directory: apps/simulator
      run: go vet ./...

    - name: Go build
      working-directory: apps/simulator
      run: go build ./...

    - name: Go test
      working-directory: apps/simulator
      run: go test -v ./...

  validate-shared-ts:
    name: Validate TypeScript Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install

    - name: Build shared-ts
      run: pnpm --filter @voyager/shared-ts build

  validate-frontend:
    name: Validate Frontend
    runs-on: ubuntu-latest
    needs: validate-shared-ts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install

    - name: Build shared-ts
      run: pnpm --filter @voyager/shared-ts build

    - name: Lint frontend
      run: pnpm --filter frontend lint

    - name: Format check frontend
      run: pnpm --filter frontend format

    - name: Type check frontend
      run: pnpm --filter frontend typecheck

    - name: Build frontend
      run: pnpm --filter frontend build

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [validate-shared-go, validate-simulator, validate-shared-ts, validate-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    strategy:
      matrix:
        service: [simulator, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set image name
      id: image-name
      run: |
        if [ "${{ matrix.service }}" = "simulator" ]; then
          echo "IMAGE_NAME=${{ env.IMAGE_NAME_SIMULATOR }}" >> $GITHUB_OUTPUT
        else
          echo "IMAGE_NAME=${{ env.IMAGE_NAME_FRONTEND }}" >> $GITHUB_OUTPUT
        fi

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.image-name.outputs.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ steps.image-name.outputs.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true